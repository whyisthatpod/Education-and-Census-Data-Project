<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/dtta2/SQL/Education and Census Data Project.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3379"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,11:maincensus_data"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="census_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="82"/><column index="3" value="71"/><column index="4" value="181"/><column index="5" value="84"/><column index="6" value="216"/><column index="7" value="211"/><column index="8" value="153"/><column index="9" value="147"/><column index="10" value="162"/><column index="11" value="143"/><column index="12" value="145"/><column index="13" value="73"/><column index="14" value="70"/><column index="15" value="71"/><column index="16" value="89"/><column index="17" value="108"/><column index="18" value="119"/><column index="19" value="98"/><column index="20" value="102"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- How many schools per zip code?
SELECT COUNT(school_name) AS schools, zip_code
FROM public_hs_data
GROUP BY zip_code
ORDER BY 1 DESC;
-- How many schools per state?
SELECT COUNT(school_name) AS schools, state_code
FROM public_hs_data
GROUP BY 2
ORDER BY 1 DESC;

-- Urbanization and size addition to table
SELECT school_name, locale_code,

CASE 
WHEN locale_code BETWEEN 11 AND 13 THEN 'City'
WHEN locale_code BETWEEN 21 AND 23 THEN 'Suburb'
WHEN locale_code BETWEEN 31 AND 33 THEN 'Town'
WHEN locale_code BETWEEN 41 AND 43 THEN 'Rural'
ELSE 'No Data'
END AS 'Urbanization',

CASE WHEN  locale_code &lt; 30 THEN
CASE substr(locale_code, 2, 1)
WHEN '1' THEN 'Large'
WHEN '2' THEN 'Midsize'
WHEN '3' THEN 'Small'
END 

WHEN locale_code &gt; 30 THEN 
CASE substr(locale_code, 2, 1)
WHEN '1' THEN 'Fringe'
WHEN '2' THEN 'Distant'
WHEN '3' THEN 'Remote'
ELSE 'No data'
END

END AS 'Size'

FROM public_hs_data;

-- for nation
SELECT MIN(median_household_income), MAX(median_household_income), ROUND(AVG(median_household_income), 2)
FROM census_data
WHERE median_household_income IS NOT 'NULL';

-- by state
SELECT state_code, MIN(median_household_income), MAX(median_household_income), ROUND(AVG(median_household_income), 2)
FROM census_data
WHERE median_household_income IS NOT 'NULL'
GROUP BY state_code;

-- joint table look at median income and test scores 
SELECT ROUND(AVG(pct_proficient_math), 2) AS 'Average Math', ROUND(AVG(pct_proficient_reading), 2) AS 'Average Reading', ROUND(AVG(median_household_income), 2) AS 'Average Household Income',

CASE 
WHEN census_data.median_household_income &lt;= 50000 THEN 'Low'
WHEN census_data.median_household_income BETWEEN 50000 AND 100000 THEN 'Medium'
WHEN census_data.median_household_income &gt;= 100000 THEN 'High'
ELSE 'No Data'
END AS income_level

FROM census_data
JOIN public_hs_data
ON census_data.zip_code = public_hs_data.zip_code
WHERE median_household_income != 'NULL'
GROUP BY income_level;

-- Math vs Reading by state

WITH math_v_reading AS (
SELECT state_code, ROUND(AVG(pct_proficient_math), 1), ROUND(AVG(pct_proficient_reading), 1),

CASE 
WHEN AVG(pct_proficient_math) &gt; AVG(pct_proficient_reading) THEN 'Math'
WHEN AVG(pct_proficient_math) &lt; AVG(pct_proficient_reading) THEN 'Reading'
WHEN AVG(pct_proficient_math) = AVG(pct_proficient_reading) THEN 'Equal'
ELSE 'No Data'
END AS math_or_reading


FROM public_hs_data
WHERE pct_proficient_math IS NOT 'NULL'
GROUP BY state_code
)
SELECT math_or_reading, COUNT(math_or_reading) AS 'States Better At'
FROM math_v_reading
GROUP BY math_or_reading;

-- State vs Zip Code
WITH statewide AS (
SELECT state_code, ROUND(AVG(pct_proficient_math), 2) AS average_math_state, ROUND(AVG(pct_proficient_reading), 2) AS average_reading_state

FROM public_hs_data
GROUP BY state_code
)
SELECT statewide.state_code, public_hs_data.zip_code, average_math_state, ROUND(AVG(pct_proficient_math), 2) AS average_math_zip, 
average_reading_state, ROUND(AVG(pct_proficient_reading), 2) AS average_reading_zip,

CASE 
WHEN AVG(pct_proficient_math) &gt; average_math_state THEN 'Zip higher than state'
WHEN AVG(pct_proficient_math) &lt; average_math_state THEN 'Zip lower than state'
WHEN AVG(pct_proficient_math) = average_math_state THEN 'Equal'
ELSE 'No Data'
END AS math_comparison,

CASE
WHEN AVG(pct_proficient_reading) &gt; average_reading_state THEN 'Zip higher than state'
WHEN AVG(pct_proficient_reading) &lt; average_reading_state THEN 'Zip lower than state'
WHEN AVG(pct_proficient_reading) = average_reading_state THEN 'Equal'
ELSE 'No Data'
END AS reading_comparison

FROM statewide
JOIN public_hs_data
ON statewide.state_code = public_hs_data.state_code
GROUP BY zip_code
ORDER BY 1 ASC;</sql><current_tab id="0"/></tab_sql></sqlb_project>
